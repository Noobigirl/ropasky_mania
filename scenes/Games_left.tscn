[gd_scene load_steps=3 format=3 uid="uid://b5h0483jboje5"]

[ext_resource type="PackedScene" uid="uid://deqe3vow6wa0n" path="res://scenes/Game_score.tscn" id="1_e62nw"]

[sub_resource type="GDScript" id="GDScript_e62nw"]
resource_name = "games_left"
script/source = "extends Control

@export var score: PackedScene
@export var game_over: String
@export var animation_in: String
@export var animation_out: String


var games_left
var score_added: int = 0
var to_change
var score_number: float

func _ready() -> void:
	games_left = $HBoxContainer.get_children() # starting off with 3 score indicators
	score_number = $HBoxContainer.get_child_count()
	GameHandling.game_status.connect(change_score)

# receiving the score indext and string -> win, lose or tie
func change_score(game_numb, result) -> void: 
	var score_reveal_timer = get_tree().create_timer(3.2) # updating the score after 3.2
	to_change = games_left[game_numb]
	await score_reveal_timer.timeout
	score_added += 1
	
	if result == \"won\":
		GameHandling.end_game[\"won\"] += 1
		to_change.texture = load(\"res://assets/sprites/games_left/won.png\")
	elif result == \"lost\":
		GameHandling.end_game[\"lost\"] += 1
		to_change.texture = load(\"res://assets/sprites/games_left/lost.png\")
	else:
		to_change.texture = load(\"res://assets/sprites/games_left/tie.png\")

	add_indicator()
	GameHandling.restart.emit() # playing next turn

func end_game() -> void:
	# -- debugging
	print(\"Checking win/loss condition\")
	print(\"Turn number is: \", GameHandling.turn_number)
	print()
	# --- comapring the ratio of wins to losses
	var win_ratio = GameHandling.end_game[\"won\"] / score_number
	var loss_ratio = GameHandling.end_game[\"lost\"] / score_number
	print(\"win_ratio:\", win_ratio, \" loss_ratio:\", loss_ratio)
			
	if GameHandling.turn_number > 1:
		# -- debugging
		print(\"won:\", GameHandling.end_game[\"won\"], \" lost:\", GameHandling.end_game[\"lost\"], \" score_number:\", score_number)
		
		# There must be a winner and a loser
		if win_ratio > loss_ratio:
			print(\"victory\")
			get_parent().get_node(\"Timer\").queue_free() # removing the timer from the tree
			SceneManager.change_scene(game_over, self)
		elif loss_ratio > win_ratio:
			print(\"Game Over\")
			get_parent().get_node(\"Timer\").queue_free() # removing the timer from the tree
			SceneManager.change_scene(game_over, self)
	
func add_indicator() -> void:
	if score_added >= 3:
		# adding more score indicator as needed
		$HBoxContainer.add_child(score.instantiate())
		
		# updating the child list ( for some reason it is not doe automatically)
		games_left = $HBoxContainer.get_children()
		score_number = $HBoxContainer.get_child_count()
		
	end_game()
"

[node name="Control" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_e62nw")
score = ExtResource("1_e62nw")
game_over = "res://scenes/Game_end.tscn"
animation_in = "swipe_in"
animation_out = "swipe_out"
metadata/_edit_lock_ = true

[node name="HBoxContainer" type="HBoxContainer" parent="."]
custom_minimum_size = Vector2(70, 30)
layout_mode = 1
offset_right = 259.0
offset_bottom = 30.0
theme_override_constants/separation = 4

[node name="Sprite2D" parent="HBoxContainer" instance=ExtResource("1_e62nw")]
layout_mode = 2

[node name="Sprite2D2" parent="HBoxContainer" instance=ExtResource("1_e62nw")]
layout_mode = 2

[node name="Sprite2D3" parent="HBoxContainer" instance=ExtResource("1_e62nw")]
layout_mode = 2
